---
import ActivityCard from './ActivityCard.astro';

interface Activity {
  title: string;
  categories: string[];
  description: string;
}

interface Props {
  name: string;
  activities: Activity[];
  categoryInfo: Record<string, string>;
}

const { name, activities, categoryInfo } = Astro.props;
const uniqueCategories = Object.keys(categoryInfo);
---

<section class="prose mb-28 max-w-3xl prose-img:border-0 dark:prose-invert">
  <h1 class="text-2xl tracking-wider sm:text-3xl">{name}</h1>

  <div class="mb-8 flex flex-wrap gap-4">
    {uniqueCategories.map(category => (
      <button
        class="category-btn relative
             text-gray-700 dark:text-gray-300
             hover:text-[rgb(var(--color-accent))]
             font-medium"
        data-category={category}
      >
        {category} {categoryInfo[category]}
      </button>
    ))}
  </div>

  <div id="activities-container">
    {activities.map(activity => (
      <ActivityCard
        title={activity.title}
        categories={activity.categories}
      >
        {activity.description}
      </ActivityCard>
    ))}
  </div>
</section>

<style>
    .category-btn.selected {
        text-decoration-line: underline;
        text-decoration-style: wavy;
        text-decoration-thickness: 2px;
        text-underline-offset: 4px;
    }
</style>

<script>
  function setupFilters() {
    const selected = new Set();

    const buttonContainer = document.querySelector('.mb-8');
    if (buttonContainer) {
      const newContainer = buttonContainer.cloneNode(true);
      buttonContainer.parentNode.replaceChild(newContainer, buttonContainer);
    }

    document.querySelectorAll('.category-btn').forEach(btn => {
      if (btn.classList.contains('selected')) {
        const category = btn.getAttribute('data-category');
        selected.add(category);
      }

      btn.addEventListener('click', () => {
        const category = btn.getAttribute('data-category');

        // Toggle selection state
        btn.classList.toggle('selected');

        if (selected.has(category)) {
          selected.delete(category);
        } else {
          selected.add(category);
        }

        document.querySelectorAll('article').forEach(article => {
          const show = selected.size === 0 ||
            Array.from(selected).every(cat => article.classList.contains(cat));
          article.classList.toggle('hidden', !show);
        });
      });
    });
  }

  document.addEventListener('DOMContentLoaded', setupFilters);
  document.addEventListener('astro:page-load', setupFilters);
</script>